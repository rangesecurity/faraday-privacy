/*
 * Privacy Transaction Disclosure API
 *
 * API specification for selective disclosure of privacy-preserving transactions across various protocols including Penumbra and Solana Confidential Transactions.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@example.com
 * Generated by: https://openapi-generator.tech
 */

use super::{configuration, Error};
use crate::{apis::ResponseContent, models};
use reqwest;
use serde::{Deserialize, Serialize};

/// struct for typed errors of method [`disclose_multiple_transactions`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DiscloseMultipleTransactionsError {
    Status400(models::Error),
    Status500(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`disclose_single_transaction`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DiscloseSingleTransactionError {
    Status400(models::Error),
    Status500(models::Error),
    UnknownValue(serde_json::Value),
}

pub async fn disclose_multiple_transactions(
    configuration: &configuration::Configuration,
    disclosure_request_multiple: models::DisclosureRequestMultiple,
) -> Result<Vec<models::DisclosedTransactionResult>, Error<DiscloseMultipleTransactionsError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_disclosure_request_multiple = disclosure_request_multiple;

    let uri_str = format!("{}/disclose/transactions", configuration.base_path);
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.json(&p_disclosure_request_multiple);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        serde_json::from_str(&content).map_err(Error::from)
    } else {
        let content = resp.text().await?;
        let entity: Option<DiscloseMultipleTransactionsError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

pub async fn disclose_single_transaction(
    configuration: &configuration::Configuration,
    disclosure_request_single: models::DisclosureRequestSingle,
) -> Result<models::Transaction, Error<DiscloseSingleTransactionError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_disclosure_request_single = disclosure_request_single;

    let uri_str = format!("{}/disclose/transaction", configuration.base_path);
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.json(&p_disclosure_request_single);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        serde_json::from_str(&content).map_err(Error::from)
    } else {
        let content = resp.text().await?;
        let entity: Option<DiscloseSingleTransactionError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}
