/*
 * Privacy Transaction Disclosure API
 *
 * API specification for selective disclosure of privacy-preserving transactions across various protocols including Penumbra and Solana Confidential Transactions.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@example.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models::Error;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct DisclosureError {
    #[serde(rename = "resultType")]
    pub result_type: ResultType,
    #[serde(rename = "transactionHash")]
    pub transaction_hash: String,
    #[serde(rename = "error")]
    pub error: Error,
    /// Identifiers for the error types
    #[serde(rename = "errorTypes")]
    pub error_types: Vec<String>,
}

impl DisclosureError {
    pub fn new(
        result_type: ResultType,
        transaction_hash: String,
        error: Error,
        error_types: Vec<String>,
    ) -> DisclosureError {
        DisclosureError {
            result_type,
            transaction_hash,
            error,
            error_types,
        }
    }
}

#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ResultType {
    #[serde(rename = "error")]
    Error,
}

impl Default for ResultType {
    fn default() -> ResultType {
        Self::Error
    }
}
