/*
 * Privacy Transaction Disclosure API
 *
 * API specification for selective disclosure of privacy-preserving transactions across various protocols including Penumbra and Solana Confidential Transactions. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@example.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Transaction {
    /// Unique transaction hash/identifier
    #[serde(rename = "transactionHash")]
    pub transaction_hash: String,
    /// Privacy protocol used (e.g., penumbra, solana)
    #[serde(rename = "protocol")]
    pub protocol: Protocol,
    /// Identifier of the blockchain where the transaction occurred
    #[serde(rename = "chainId")]
    pub chain_id: String,
    /// Involved parties in the transaction
    #[serde(rename = "counterparties")]
    pub counterparties: Vec<models::Counterparty>,
    /// Timestamp of the transaction
    #[serde(rename = "timestamp")]
    pub timestamp: String,
    /// Optional metadata about the transaction
    #[serde(rename = "metadata", skip_serializing_if = "Option::is_none")]
    pub metadata: Option<Vec<models::Metadata>>,
}

impl Transaction {
    pub fn new(transaction_hash: String, protocol: Protocol, chain_id: String, counterparties: Vec<models::Counterparty>, timestamp: String) -> Transaction {
        Transaction {
            transaction_hash,
            protocol,
            chain_id,
            counterparties,
            timestamp,
            metadata: None,
        }
    }
}
/// Privacy protocol used (e.g., penumbra, solana)
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Protocol {
    #[serde(rename = "penumbra")]
    Penumbra,
    #[serde(rename = "solana_confidential_transaction")]
    SolanaConfidentialTransaction,
}

impl Default for Protocol {
    fn default() -> Protocol {
        Self::Penumbra
    }
}

