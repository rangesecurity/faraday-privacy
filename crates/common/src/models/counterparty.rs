/*
 * Privacy Transaction Disclosure API
 *
 * API specification for selective disclosure of privacy-preserving transactions across various protocols including Penumbra and Solana Confidential Transactions. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@example.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Counterparty {
    /// Role of the counterparty in the transaction
    #[serde(rename = "role")]
    pub role: Role,
    /// Address of the counterparty
    #[serde(rename = "address")]
    pub address: String,
    /// Optional identifier or label for the counterparty
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Assets transferred by this counterparty
    #[serde(rename = "assets")]
    pub assets: Vec<models::Asset>,
}

impl Counterparty {
    pub fn new(role: Role, address: String, assets: Vec<models::Asset>) -> Counterparty {
        Counterparty {
            role,
            address,
            name: None,
            assets,
        }
    }
}
/// Role of the counterparty in the transaction
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Role {
    #[serde(rename = "sender")]
    Sender,
    #[serde(rename = "receiver")]
    Receiver,
}

impl Default for Role {
    fn default() -> Role {
        Self::Sender
    }
}

