/*
 * Privacy Transaction Disclosure API
 *
 * API specification for selective disclosure of privacy-preserving transactions across various protocols including Penumbra and Solana Confidential Transactions. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@example.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// Metadata : Optional metadata for additional transaction context
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Metadata {
    /// Type of transaction
    #[serde(rename = "transactionType", skip_serializing_if = "Option::is_none")]
    pub transaction_type: Option<TransactionType>,
    /// Custom tags for the transaction
    #[serde(rename = "tags", skip_serializing_if = "Option::is_none")]
    pub tags: Option<Vec<String>>,
    /// Additional notes about the transaction
    #[serde(rename = "notes", skip_serializing_if = "Option::is_none")]
    pub notes: Option<String>,
}

impl Metadata {
    /// Optional metadata for additional transaction context
    pub fn new() -> Metadata {
        Metadata {
            transaction_type: None,
            tags: None,
            notes: None,
        }
    }
}
/// Type of transaction
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum TransactionType {
    #[serde(rename = "transfer")]
    Transfer,
    #[serde(rename = "swap")]
    Swap,
}

impl Default for TransactionType {
    fn default() -> TransactionType {
        Self::Transfer
    }
}

